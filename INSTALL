This document contains a small write up to help new and less experienced users to get the dungeons project running on their machine.
The first section focusses on just getting dungeons.py to run .
The second section shortly explains how to use github to make changes and push them back to the online code repository. 


1. To get a copy of the code (without being able to upload your changes)
########################################################################

1.A. Get the source code from Github
------------------------------------

#this will create a sub directory "dungeons" in the current directory
git clone https://github.com/DebianJoe/dungeons.git
#in a later time to update the local copy based on what other people changed in git
git pull https://github.com/DebianJoe/dungeons.git
#alternative way to do it: git pull origin master

1.B  Download the pre-requisite library libtcod 
-----------------------------------------------
Grab version 1.5.1 from http://doryen.eptalys.net/libtcod/download/
Extract some place, it will create a subdirectory "libtcod-1.5.1"
Copy the following two files from the extracted archive to the dungeons directory
libtcodpy.py
libtcod.so

I had some difficulty with libtcod.so on Crunchbang Waldorf 64. There is an incident on DebinaJoes github that provides some more info in case you need it.

1.C Download the media files
----------------------------
This is no longer required, the media files now come via Github

1.D Run it
----------
Start the application from the dungeons directory
python dungeons.py


2. To contribute (push your local changes back to Github)
#########################################################
Please note this is not a full doc on Github. It is some notes I took when first setting this up and which might help first time Github users to get through it a bit quicker.
If you skipped part 1, make sure you do step 1.B and step 1.C to get the prerequired library libtcod and the media files.

2.A Register & setup git
------------------------
Go to Github, register an account.
Git is pre-installed on crunchbang but you need to configure it to use your newly created account, steps are detailed here
https://help.github.com/articles/set-up-git

2.B Fork DebianJoes repository
------------------------------
Next step is to create your own copy of the dungeons code, this is called a "fork", steps are detailed here
https://help.github.com/articles/fork-a-repo
I'll provide a bit more detail on how to apply it to the dungeons project. Note that all the git commands below have to be executed in the dugeons directory
In short this is what should be done, replace <USERNAME> with your own username!

On the github website: Log in and navigate to DebianJoes repository, click on the button fork (top right hand corner of main page)
This will create a copy of the code (a fork) in your github account.

#To download the code to your machine (this will create a subdirectory dungeons)
git clone https://github.com/<USERNAME>/dungeons.git

#create upstream link to DebianJoes repository, you need this to be able to move your changes upstream back to DebianJoes master repository
cd dungeons
git remote add upstream https://github.com/DebianJoe/dungeons.git

2.C Make changes and upload them
--------------------------------
#Change one of the local files, for example add your name to the README or tweak something in dungeons.py
#The files are now only changed locally. A this point it is perfectly normal that you break something. Before moving to the next step make sure you fix things so that they work :-)
#Don't be afraid to experiment, if you completely break it you can "reset" your local version easily using git checkout. For example resetting the README file
git checkout -- README

#Once you are happy with your changes you have to commit them. This confirms the changes in your own local github repository
#commit all files, replace "comment here" with a short comment that describes your changes.
git commit -am 'comment here'

#Next step is to push the changes out to your personnal git repository, for this use the push command:
git push origin master
#You should see the changed file being uploaded, now your changes are in your github repository

#How can you get the changes in the master version (DebianJoes repository)? Since DebianJoe is managing this repository you need to request him to pull in the changes from your repository. He is kinda like a gatekeeper. :-)
#Do this via the Github website: Go to your repository and click on the Pull Request button. Fill in the little form and send it. This should result in a Pull request (yours) that shows up in DebianJoes repository where he can then treat it.

#More information about pull requests: https://help.github.com/articles/using-pull-requests

2.D Get future changes from DebianJoes master repository
--------------------------------------------------------
#Before starting work it is often a good idea to refresh your local files so you have the latests updates from the master repository.
#first get upstream changes (we set upstream to point to DebianJoes repository in step 2.B)
git fetch upstream
#then merge them in your repository
git merge upstream/master
#at this point the changes are local to your system. To push them in your own Github repository you can again use
git push origin master

